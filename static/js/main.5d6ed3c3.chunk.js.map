{"version":3,"sources":["components/ui/atoms/GButton/GButton.js","components/ui/atoms/GButton/index.js","components/ui/atoms/GCard/GCard.js","components/ui/atoms/GCard/index.js","components/ui/atoms/GInput/GInput.js","components/ui/atoms/GInput/index.js","components/ui/atoms/GText/GText.js","components/ui/atoms/GText/index.js","components/ui/atoms/GTitle/GTitle.js","components/ui/atoms/GTitle/index.js","components/ui/molecules/GModal/GModal.js","components/ui/molecules/GModal/index.js","services/character.js","contexts/GlobalContext.js","components/ui/molecules/GPagination/GPagination.js","components/ui/molecules/GPagination/index.js","assets/imgs/logo.png","components/SearchSection/SearchSection.js","components/SearchSection/index.js","assets/imgs/loading.png","components/TheLoading/TheLoading.js","components/TheLoading/index.js","components/CharacterCard/CharacterCard.js","components/CharacterCard/index.js","pages/TheHome/TheHome.js","pages/TheHome/index.js","routes/index.js","App.js","reportWebVitals.js","index.js"],"names":["GButton","children","classes","rest","className","classNames","GCard","variant","defaultProps","GInput","change","onEnter","onChange","onKeyPress","e","key","GText","color","family","GTitle","spacing","tag","weight","HtmlTag","GModal","page","search","axios","post","query","GlobalContext","createContext","GlobalStorage","useState","setPage","paginationPage","setPaginationPage","maxPage","setMaxPage","searchTerm","setSearchTerm","characters","setCharacters","isLoading","setIsLoading","pageToSearch","CharacterService","getCharacters","then","data","info","results","pages","catch","err","console","log","value","handleSearch","handlePagination","pageFromPagination","Provider","GPagination","useContext","pageNumbers","setPageNumbers","handlePageChange","useEffect","window","innerWidth","numbersArray","minNumber","maxNumber","i","push","icon","faChevronLeft","onClick","map","pageNumber","faChevronRight","SearchSection","src","logo","alt","type","placeholder","target","TheLoading","loading","CharacterCard","character","status","image","name","species","TheHome","id","length","Routes","exact","path","component","from","to","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5d6ed3c3.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames/bind';\nimport PropTypes from 'prop-types';\n\nimport './GButton.scss';\n\nfunction GButton({ children, classes, ...rest }) {\n  const className = classNames('g-button', classes);\n\n  return (\n    <button className={className} {...rest}>\n      {children}\n    </button>\n  );\n}\n\nGButton.propTypes = {\n  children: PropTypes.node,\n  classes: PropTypes.string,\n};\n\nexport default GButton;\n","import GButton from './GButton';\n\nexport default GButton;\n","import React from 'react';\nimport classNames from 'classnames/bind';\nimport PropTypes from 'prop-types';\n\nimport './GCard.scss';\n\nfunction GCard({ children, classes, variant, ...rest }) {\n  const className = classNames('g-card', `g-card--${variant}`, classes);\n\n  return (\n    <div className={className} {...rest}>\n      {children}\n    </div>\n  );\n}\n\nGCard.defaultProps = {\n  variant: 'normal',\n};\n\nGCard.propTypes = {\n  children: PropTypes.node,\n  classes: PropTypes.string,\n  variant: PropTypes.oneOf(['normal', 'loading', 'sheet', 'img-sheet']),\n};\n\nexport default GCard;\n","import GCard from './GCard';\n\nexport default GCard;\n","import React from 'react';\nimport classNames from 'classnames/bind';\nimport PropTypes from 'prop-types';\n\nimport './GInput.scss';\n\nfunction GInput({ change, classes, onEnter, ...rest }) {\n  const className = classNames('g-input', classes);\n\n  function handleKey(e) {\n    if (e.key === 'Enter') {\n      onEnter();\n    }\n  }\n\n  return (\n    <input\n      className={className}\n      onChange={change}\n      onKeyPress={handleKey}\n      {...rest}\n    />\n  );\n}\n\nGInput.defaultProps = {\n  change: () => {},\n  onEnter: () => {},\n};\n\nGInput.propTypes = {\n  change: PropTypes.func,\n  classes: PropTypes.string,\n  onEnter: PropTypes.func,\n};\n\nexport default GInput;\n","import GInput from './GInput';\n\nexport default GInput;\n","import React from 'react';\nimport classNames from 'classnames/bind';\nimport PropTypes from 'prop-types';\n\nimport './GText.scss';\n\nfunction GText({ color, children, classes, family, ...rest }) {\n  const className = classNames(\n    'g-text',\n    `g-text--${color}`,\n    `g-text--${family}`,\n    classes\n  );\n\n  return (\n    <p className={className} {...rest}>\n      {children}\n    </p>\n  );\n}\n\nGText.defaultProps = {\n  color: 'white',\n  family: 'nunito',\n};\n\nGText.propTypes = {\n  children: PropTypes.node,\n  classes: PropTypes.string,\n  color: PropTypes.oneOf(['darkest-grey', 'light-grey', 'white']),\n  family: PropTypes.oneOf(['nunito', 'seravek']),\n};\n\nexport default GText;\n","import GText from './GText';\n\nexport default GText;\n","import React from 'react';\nimport classNames from 'classnames/bind';\nimport PropTypes from 'prop-types';\n\nimport './GTitle.scss';\n\nfunction GTitle({\n  color,\n  children,\n  classes,\n  family,\n  spacing,\n  tag,\n  weight,\n  ...rest\n}) {\n  const HtmlTag = tag;\n  const className = classNames(\n    'g-title',\n    `g-title--${color}`,\n    `g-title--${family}`,\n    `g-title--space-${spacing}`,\n    `g-title--${weight}`,\n    classes\n  );\n\n  return (\n    <HtmlTag className={className} {...rest}>\n      {children}\n    </HtmlTag>\n  );\n}\n\nGTitle.defaultProps = {\n  color: 'white',\n  family: 'nunito',\n  spacing: 'normal',\n  tag: 'h1',\n  weight: 'normal',\n};\n\nGTitle.propTypes = {\n  children: PropTypes.node,\n  classes: PropTypes.string,\n  color: PropTypes.oneOf(['darkest-grey', 'light-grey', 'lime-green', 'white']),\n  family: PropTypes.oneOf(['nunito', 'seravek']),\n  spacing: PropTypes.oneOf(['normal', 'large']),\n  tag: PropTypes.oneOf(['h1', 'h2', 'h3', 'h4', 'h5', 'h6']),\n  weight: PropTypes.oneOf(['normal', 'bold']),\n};\n\nexport default GTitle;\n","import GTitle from './GTitle';\n\nexport default GTitle;\n","import React from 'react';\nimport classNames from 'classnames/bind';\nimport PropTypes from 'prop-types';\n\nimport './GModal.scss';\n\nfunction GModal({ children, classes, ...rest }) {\n  const className = classNames('g-modal', classes);\n\n  return (\n    <div className={className} {...rest}>\n      {children}\n    </div>\n  );\n}\n\nGModal.propTypes = {\n  children: PropTypes.node,\n  classes: PropTypes.string,\n};\n\nexport default GModal;\n","import GModal from './GModal';\n\nexport default GModal;\n","import axios from 'axios';\n\nclass Character {\n  getCharacters(page = 1, search = '') {\n    return axios.post('https://rickandmortyapi.com/graphql', {\n      query: `\n        query {\n          characters(page: ${page}, filter: { name: \"${search}\" }) {\n            info {\n              pages\n            }\n            results {\n              id,\n              name,\n              status,\n              species,\n              image,\n              origin {\n                name,\n                type,\n                dimension,\n                residents {\n                  id\n                }\n              },\n              location {\n                name,\n                type,\n                dimension,\n                residents {\n                  id\n                }\n              }\n            }\n          }\n        }\n      `,\n    });\n  }\n}\n\nexport default new Character();\n","import React, { createContext, useState } from 'react';\n\nimport CharacterService from '@services/character';\n\nexport const GlobalContext = createContext();\n\nexport const GlobalStorage = ({ children }) => {\n  // eslint-disable-next-line no-unused-vars\n  const [page, setPage] = useState(1);\n  const [paginationPage, setPaginationPage] = useState(1);\n  const [maxPage, setMaxPage] = useState(1);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [characters, setCharacters] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  function handleSearch() {\n    search(1);\n    setPage(1);\n    setPaginationPage(1);\n  }\n\n  function handlePagination(pageFromPagination) {\n    setPaginationPage(pageFromPagination);\n\n    search(pageFromPagination);\n  }\n\n  function search(pageToSearch) {\n    setIsLoading(true);\n\n    CharacterService.getCharacters(pageToSearch, searchTerm)\n      .then(({ data }) => {\n        const { info, results } = data.data.characters;\n\n        setCharacters(results);\n        setMaxPage(info.pages);\n        setIsLoading(false);\n      })\n      .catch((err) => {\n        console.log(err);\n        setIsLoading(false);\n      });\n  }\n\n  const value = {\n    characters,\n    handleSearch,\n    handlePagination,\n    isLoading,\n    maxPage,\n    paginationPage,\n    searchTerm,\n    setSearchTerm,\n  };\n\n  return (\n    <GlobalContext.Provider value={value}>{children}</GlobalContext.Provider>\n  );\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport classNames from 'classnames/bind';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faChevronLeft,\n  faChevronRight,\n} from '@fortawesome/free-solid-svg-icons';\n\nimport { GlobalContext } from '@contexts/GlobalContext';\n\nimport './GPagination.scss';\n\nfunction GPagination({ children, classes, ...rest }) {\n  const className = classNames('g-pagination', classes);\n  const { maxPage, handlePagination, paginationPage } = useContext(\n    GlobalContext\n  );\n  const [pageNumbers, setPageNumbers] = useState([]);\n\n  useEffect(\n    () => {\n      if (window.innerWidth < 768) {\n        setPageNumbers([paginationPage]);\n      } else {\n        const numbersArray = [];\n        let minNumber = paginationPage - 2;\n        let maxNumber = paginationPage + 2;\n\n        if (minNumber < 1) {\n          maxNumber += 1 - minNumber;\n          minNumber = 1;\n        }\n\n        if (maxNumber > maxPage) {\n          maxNumber = maxPage;\n        }\n\n        for (let i = minNumber; i <= maxNumber; i++) {\n          numbersArray.push(i);\n        }\n\n        setPageNumbers(numbersArray);\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [paginationPage, maxPage]\n  );\n\n  function handlePageChange(page) {\n    if (!(page < 1 || page > maxPage || page === paginationPage)) {\n      handlePagination(page);\n    }\n  }\n\n  return (\n    <div className={className} {...rest}>\n      <FontAwesomeIcon\n        icon={faChevronLeft}\n        className={`${\n          paginationPage === 1\n            ? 'pagination__icon-disabled'\n            : 'pagination__icon'\n        }`}\n        onClick={() => handlePageChange(paginationPage - 1)}\n      />\n      {pageNumbers.map((pageNumber) => (\n        <span\n          key={pageNumber}\n          className={`pagination__number${\n            pageNumber === paginationPage ? ' pagination__number--active' : ''\n          }`}\n          onClick={() => handlePageChange(pageNumber)}\n        >\n          {pageNumber}\n        </span>\n      ))}\n      <FontAwesomeIcon\n        icon={faChevronRight}\n        className={`${\n          paginationPage === maxPage\n            ? 'pagination__icon-disabled'\n            : 'pagination__icon'\n        }`}\n        onClick={() => handlePageChange(paginationPage + 1)}\n      />\n    </div>\n  );\n}\n\nGPagination.propTypes = {\n  classes: PropTypes.string,\n};\n\nexport default GPagination;\n","import GPagination from './GPagination';\n\nexport default GPagination;\n","export default __webpack_public_path__ + \"static/media/logo.66cb6353.png\";","import React, { useContext } from 'react';\n\nimport { GButton, GInput } from '@ui';\nimport { GlobalContext } from '@contexts/GlobalContext';\n\nimport logo from '@assets/imgs/logo.png';\n\nimport './SearchSection.scss';\n\nfunction SearchSection() {\n  const { searchTerm, setSearchTerm, handleSearch } = useContext(GlobalContext);\n\n  return (\n    <section className=\"search-section\">\n      <img\n        src={logo}\n        alt=\"Rick and Morty logo\"\n        className=\"search-section__logo\"\n      />\n      <div className=\"search-section__input-container\">\n        <GInput\n          type=\"text\"\n          placeholder=\"Search characters\"\n          value={searchTerm}\n          change={({ target }) => setSearchTerm(target.value)}\n          onEnter={handleSearch}\n        />\n        <GButton classes=\"search-section__button\" onClick={handleSearch}>\n          Search\n        </GButton>\n      </div>\n    </section>\n  );\n}\n\nexport default SearchSection;\n","import SearchSection from './SearchSection';\n\nexport default SearchSection;\n","export default __webpack_public_path__ + \"static/media/loading.1a60ec50.png\";","import React from 'react';\n\nimport { GModal, GText } from '@ui';\n\nimport loading from '@assets/imgs/loading.png';\n\nimport './TheLoading.scss';\n\nfunction TheLoading() {\n  return (\n    <GModal>\n      <img\n        src={loading}\n        alt=\"Rick and Morty visiting an alien planet\"\n        className=\"the-loading__img\"\n      />\n      <GText classes=\"the-loading__text\">Loading</GText>\n    </GModal>\n  );\n}\n\nexport default TheLoading;\n","import TheLoading from './TheLoading';\n\nexport default TheLoading;\n","import React from 'react';\nimport classNames from 'classnames/bind';\nimport PropTypes from 'prop-types';\n\nimport { GCard, GText, GTitle } from '@ui';\n\nimport './CharacterCard.scss';\n\nfunction CharacterCard({ character }) {\n  const className = classNames(\n    'character-card__img',\n    character.status === 'Dead' && 'character-card__img--dead'\n  );\n\n  return (\n    <>\n      <GCard classes=\"character-card\">\n        <img src={character.image} alt={character.name} className={className} />\n        <div className=\"character-card__text-container\">\n          <GTitle\n            family=\"seravek\"\n            weight=\"bold\"\n            classes=\"character-card__title\"\n          >\n            {character.name}\n          </GTitle>\n          <GText family=\"seravek\" classes=\"character-card__subtitle\">\n            {character.species}\n          </GText>\n        </div>\n      </GCard>\n    </>\n  );\n}\n\nCharacterCard.propTypes = {\n  character: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    image: PropTypes.string.isRequired,\n    species: PropTypes.string.isRequired,\n    status: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default CharacterCard;\n","import CharacterCard from './CharacterCard';\n\nexport default CharacterCard;\n","import React, { useContext } from 'react';\nimport classNames from 'classnames/bind';\n\nimport SearchSection from '@components/SearchSection';\nimport TheLoading from '@components/TheLoading';\nimport CharacterCard from '@components/CharacterCard';\nimport { GPagination } from '@ui';\nimport { GlobalContext } from '@contexts/GlobalContext';\n\nimport './TheHome.scss';\n\nfunction TheHome() {\n  const { characters, isLoading } = useContext(GlobalContext);\n  const className = classNames('the-home', isLoading && ' the-home--blur');\n\n  return (\n    <>\n      {isLoading && <TheLoading />}\n      <div className={className}>\n        <div className=\"the-home__img-background\">\n          <SearchSection />\n          <section className=\"the-home__cards\">\n            {characters.map((character) => (\n              <CharacterCard key={character.id} character={character} />\n            ))}\n          </section>\n          {characters.length && (\n            <section className=\"the-home__pagination-section\">\n              <GPagination />\n            </section>\n          )}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default TheHome;\n","import TheHome from './TheHome';\n\nexport default TheHome;\n","import React from 'react';\nimport {\n  Redirect,\n  Route,\n  BrowserRouter as Router,\n  Switch,\n} from 'react-router-dom';\n\nimport TheHome from '@pages/TheHome';\n\nconst Routes = () => (\n  <Router>\n    <Switch>\n      <Route exact path=\"/rick-morty-front-end-test\" component={TheHome} />\n      <Redirect from=\"*\" to=\"/rick-morty-front-end-test\" />\n    </Switch>\n  </Router>\n);\n\nexport default Routes;\n","import Routes from '@/routes';\n\nimport { GlobalStorage } from '@contexts/GlobalContext';\n\nimport '@/App.scss';\n\nfunction App() {\n  return (\n    <GlobalStorage>\n      <Routes />\n    </GlobalStorage>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from '@/App';\nimport reportWebVitals from '@/reportWebVitals';\n\nimport '@/index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}