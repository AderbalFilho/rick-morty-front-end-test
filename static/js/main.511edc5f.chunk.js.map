{"version":3,"sources":["components/ui/atoms/GButton/GButton.js","components/ui/atoms/GButton/index.js","components/ui/atoms/GCard/GCard.js","components/ui/atoms/GCard/index.js","components/ui/atoms/GInput/GInput.js","components/ui/atoms/GInput/index.js","components/ui/atoms/GText/GText.js","components/ui/atoms/GText/index.js","components/ui/atoms/GTitle/GTitle.js","components/ui/atoms/GTitle/index.js","components/ui/molecules/GModal/GModal.js","components/ui/molecules/GModal/index.js","services/character.js","contexts/GlobalContext.js","components/ui/molecules/GPagination/GPagination.js","components/ui/molecules/GPagination/index.js","assets/imgs/logo.png","components/SearchSection/SearchSection.js","components/SearchSection/index.js","assets/imgs/loading.png","components/TheLoading/TheLoading.js","components/TheLoading/index.js","components/CharacterCard/CharacterCard.js","components/CharacterCard/index.js","components/CharacterLocation/CharacterLocation.js","components/CharacterLocation/index.js","components/CharacterInfo/CharacterInfo.js","components/CharacterInfo/index.js","components/CharacterSheet/CharacterSheet.js","components/CharacterSheet/index.js","components/CharacterSheetMobile/CharacterSheetMobile.js","components/CharacterSheetMobile/index.js","pages/TheHome/TheHome.js","pages/TheHome/index.js","routes/index.js","App.js","reportWebVitals.js","index.js"],"names":["GButton","children","classes","rest","className","classNames","GCard","variant","defaultProps","GInput","change","onEnter","onChange","onKeyPress","e","key","GText","color","family","GTitle","spacing","tag","weight","HtmlTag","GModal","page","search","axios","post","query","GlobalContext","createContext","GlobalStorage","useState","setPage","paginationPage","setPaginationPage","maxPage","setMaxPage","searchTerm","setSearchTerm","characters","setCharacters","isLoading","setIsLoading","modalCharacter","setModalCharacter","pageToSearch","CharacterService","getCharacters","then","data","info","results","pages","catch","err","console","log","value","handleSearch","handlePagination","pageFromPagination","Provider","GPagination","useContext","classNamePrevious","setClassNamePrevious","classNameNext","setClassNameNext","pageNumbers","setPageNumbers","handlePageChange","useEffect","isFirstPage","isLastPage","window","innerWidth","numbersArray","minNumber","maxNumber","i","push","icon","faChevronLeft","onClick","map","pageNumber","isActualPage","classNamePageActive","faChevronRight","SearchSection","src","logo","alt","type","placeholder","target","TheLoading","loading","CharacterCard","character","status","image","name","species","CharacterLocation","location","residents","length","residentsNumber","setResidentsNumber","dimension","faUserFriends","CharacterInfo","gender","toLowerCase","lastSeen","episode","air_date","aboutText","setAboutText","returnPersonalPronoun","origin","CharacterSheet","CharacterSheetMobile","faTimes","TheHome","id","Routes","exact","path","component","from","to","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.511edc5f.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames/bind';\nimport PropTypes from 'prop-types';\n\nimport './GButton.scss';\n\nfunction GButton({ children, classes, ...rest }) {\n  const className = classNames('g-button', classes);\n\n  return (\n    <button className={className} {...rest}>\n      {children}\n    </button>\n  );\n}\n\nGButton.propTypes = {\n  children: PropTypes.node,\n  classes: PropTypes.string,\n};\n\nexport default GButton;\n","import GButton from './GButton';\n\nexport default GButton;\n","import React from 'react';\nimport classNames from 'classnames/bind';\nimport PropTypes from 'prop-types';\n\nimport './GCard.scss';\n\nfunction GCard({ children, classes, variant, ...rest }) {\n  const className = classNames('g-card', `g-card--${variant}`, classes);\n\n  return (\n    <div className={className} {...rest}>\n      {children}\n    </div>\n  );\n}\n\nGCard.defaultProps = {\n  variant: 'normal',\n};\n\nGCard.propTypes = {\n  children: PropTypes.node,\n  classes: PropTypes.string,\n  variant: PropTypes.oneOf(['normal', 'loading', 'sheet', 'img-sheet']),\n};\n\nexport default GCard;\n","import GCard from './GCard';\n\nexport default GCard;\n","import React from 'react';\nimport classNames from 'classnames/bind';\nimport PropTypes from 'prop-types';\n\nimport './GInput.scss';\n\nfunction GInput({ change, classes, onEnter, ...rest }) {\n  const className = classNames('g-input', classes);\n\n  function handleKey(e) {\n    if (e.key === 'Enter') {\n      onEnter();\n    }\n  }\n\n  return (\n    <input\n      className={className}\n      onChange={change}\n      onKeyPress={handleKey}\n      {...rest}\n    />\n  );\n}\n\nGInput.defaultProps = {\n  change: () => {},\n  onEnter: () => {},\n};\n\nGInput.propTypes = {\n  change: PropTypes.func,\n  classes: PropTypes.string,\n  onEnter: PropTypes.func,\n};\n\nexport default GInput;\n","import GInput from './GInput';\n\nexport default GInput;\n","import React from 'react';\nimport classNames from 'classnames/bind';\nimport PropTypes from 'prop-types';\n\nimport './GText.scss';\n\nfunction GText({ color, children, classes, family, ...rest }) {\n  const className = classNames(\n    'g-text',\n    `g-text--${color}`,\n    `g-text--${family}`,\n    classes\n  );\n\n  return (\n    <p className={className} {...rest}>\n      {children}\n    </p>\n  );\n}\n\nGText.defaultProps = {\n  color: 'white',\n  family: 'nunito',\n};\n\nGText.propTypes = {\n  children: PropTypes.node,\n  classes: PropTypes.string,\n  color: PropTypes.oneOf(['darkest-grey', 'light-grey', 'white']),\n  family: PropTypes.oneOf(['nunito', 'seravek']),\n};\n\nexport default GText;\n","import GText from './GText';\n\nexport default GText;\n","import React from 'react';\nimport classNames from 'classnames/bind';\nimport PropTypes from 'prop-types';\n\nimport './GTitle.scss';\n\nfunction GTitle({\n  color,\n  children,\n  classes,\n  family,\n  spacing,\n  tag,\n  weight,\n  ...rest\n}) {\n  const HtmlTag = tag;\n  const className = classNames(\n    'g-title',\n    `g-title--${color}`,\n    `g-title--${family}`,\n    `g-title--space-${spacing}`,\n    `g-title--${weight}`,\n    classes\n  );\n\n  return (\n    <HtmlTag className={className} {...rest}>\n      {children}\n    </HtmlTag>\n  );\n}\n\nGTitle.defaultProps = {\n  color: 'white',\n  family: 'nunito',\n  spacing: 'normal',\n  tag: 'h1',\n  weight: 'normal',\n};\n\nGTitle.propTypes = {\n  children: PropTypes.node,\n  classes: PropTypes.string,\n  color: PropTypes.oneOf(['darkest-grey', 'light-grey', 'lime-green', 'white']),\n  family: PropTypes.oneOf(['nunito', 'seravek']),\n  spacing: PropTypes.oneOf(['normal', 'large']),\n  tag: PropTypes.oneOf(['h1', 'h2', 'h3', 'h4', 'h5', 'h6']),\n  weight: PropTypes.oneOf(['normal', 'bold']),\n};\n\nexport default GTitle;\n","import GTitle from './GTitle';\n\nexport default GTitle;\n","import React from 'react';\nimport classNames from 'classnames/bind';\nimport PropTypes from 'prop-types';\n\nimport './GModal.scss';\n\nfunction GModal({ children, classes, ...rest }) {\n  const className = classNames('g-modal', classes);\n\n  return (\n    <div className={className} {...rest}>\n      {children}\n    </div>\n  );\n}\n\nGModal.propTypes = {\n  children: PropTypes.node,\n  classes: PropTypes.string,\n};\n\nexport default GModal;\n","import GModal from './GModal';\n\nexport default GModal;\n","import axios from 'axios';\n\nclass Character {\n  getCharacters(page = 1, search = '') {\n    return axios.post('https://rickandmortyapi.com/graphql', {\n      query: `\n        query {\n          characters(page: ${page}, filter: { name: \"${search}\" }) {\n            info {\n              pages\n            }\n            results {\n              id,\n              name,\n              status,\n              species,\n              gender,\n              image,\n              origin {\n                name,\n                type,\n                dimension,\n                residents {\n                  id\n                }\n              },\n              location {\n                name,\n                type,\n                dimension,\n                residents {\n                  id\n                }\n              },\n              episode {\n                air_date\n              }\n            }\n          }\n        }\n      `,\n    });\n  }\n}\n\nexport default new Character();\n","import React, { createContext, useState } from 'react';\n\nimport CharacterService from '@services/character';\n\nexport const GlobalContext = createContext();\n\nexport const GlobalStorage = ({ children }) => {\n  // eslint-disable-next-line no-unused-vars\n  const [page, setPage] = useState(1);\n  const [paginationPage, setPaginationPage] = useState(1);\n  const [maxPage, setMaxPage] = useState(1);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [characters, setCharacters] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [modalCharacter, setModalCharacter] = useState(null);\n\n  function handleSearch() {\n    search(1);\n    setPage(1);\n    setPaginationPage(1);\n  }\n\n  function handlePagination(pageFromPagination) {\n    setPaginationPage(pageFromPagination);\n\n    search(pageFromPagination);\n  }\n\n  function search(pageToSearch) {\n    setIsLoading(true);\n\n    CharacterService.getCharacters(pageToSearch, searchTerm)\n      .then(({ data }) => {\n        const { info, results } = data.data.characters;\n\n        setCharacters(results);\n        setMaxPage(info.pages);\n        setIsLoading(false);\n      })\n      .catch((err) => {\n        console.log(err);\n        setIsLoading(false);\n      });\n  }\n\n  const value = {\n    characters,\n    handleSearch,\n    handlePagination,\n    isLoading,\n    maxPage,\n    modalCharacter,\n    paginationPage,\n    searchTerm,\n    setModalCharacter,\n    setSearchTerm,\n  };\n\n  return (\n    <GlobalContext.Provider value={value}>{children}</GlobalContext.Provider>\n  );\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport classNames from 'classnames/bind';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faChevronLeft,\n  faChevronRight,\n} from '@fortawesome/free-solid-svg-icons';\n\nimport { GlobalContext } from '@contexts/GlobalContext';\n\nimport './GPagination.scss';\n\nfunction GPagination({ children, classes, ...rest }) {\n  const { maxPage, handlePagination, paginationPage } = useContext(\n    GlobalContext\n  );\n  const className = classNames('g-pagination', classes);\n  const [classNamePrevious, setClassNamePrevious] = useState('');\n  const [classNameNext, setClassNameNext] = useState('');\n  const [pageNumbers, setPageNumbers] = useState([]);\n\n  useEffect(() => {\n    const isFirstPage = paginationPage === 1;\n    const isLastPage = paginationPage === maxPage;\n\n    setClassNamePrevious(\n      classNames(\n        'pagination__icon',\n        isFirstPage && 'pagination__icon pagination__icon--disabled'\n      )\n    );\n    setClassNameNext(\n      classNames(\n        'pagination__icon',\n        isLastPage && 'pagination__icon pagination__icon--disabled'\n      )\n    );\n  }, [paginationPage, maxPage]);\n\n  useEffect(\n    () => {\n      if (window.innerWidth < 768) {\n        setPageNumbers([paginationPage]);\n      } else {\n        const numbersArray = [];\n        let minNumber = paginationPage - 2;\n        let maxNumber = paginationPage + 2;\n\n        if (minNumber < 1) {\n          maxNumber += 1 - minNumber;\n          minNumber = 1;\n        }\n\n        if (maxNumber > maxPage) {\n          maxNumber = maxPage;\n        }\n\n        for (let i = minNumber; i <= maxNumber; i++) {\n          numbersArray.push(i);\n        }\n\n        setPageNumbers(numbersArray);\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [paginationPage, maxPage]\n  );\n\n  function handlePageChange(page) {\n    if (!(page < 1 || page > maxPage || page === paginationPage)) {\n      handlePagination(page);\n    }\n  }\n\n  return (\n    <div className={className} {...rest}>\n      <FontAwesomeIcon\n        icon={faChevronLeft}\n        className={classNamePrevious}\n        onClick={() => handlePageChange(paginationPage - 1)}\n      />\n      {pageNumbers.map((pageNumber) => {\n        const isActualPage = pageNumber === paginationPage;\n        const classNamePageActive = classNames(\n          'pagination__number',\n          isActualPage && 'pagination__number--active'\n        );\n\n        return (\n          <span\n            key={pageNumber}\n            className={classNamePageActive}\n            onClick={() => handlePageChange(pageNumber)}\n          >\n            {pageNumber}\n          </span>\n        );\n      })}\n      <FontAwesomeIcon\n        icon={faChevronRight}\n        className={classNameNext}\n        onClick={() => handlePageChange(paginationPage + 1)}\n      />\n    </div>\n  );\n}\n\nGPagination.propTypes = {\n  classes: PropTypes.string,\n};\n\nexport default GPagination;\n","import GPagination from './GPagination';\n\nexport default GPagination;\n","export default __webpack_public_path__ + \"static/media/logo.66cb6353.png\";","import React, { useContext } from 'react';\n\nimport { GButton, GInput } from '@ui';\nimport { GlobalContext } from '@contexts/GlobalContext';\n\nimport logo from '@assets/imgs/logo.png';\n\nimport './SearchSection.scss';\n\nfunction SearchSection() {\n  const { searchTerm, setSearchTerm, handleSearch } = useContext(GlobalContext);\n\n  return (\n    <section className=\"search-section\">\n      <img\n        src={logo}\n        alt=\"Rick and Morty logo\"\n        className=\"search-section__logo\"\n      />\n      <div className=\"search-section__input-container\">\n        <GInput\n          type=\"text\"\n          placeholder=\"Search characters\"\n          value={searchTerm}\n          change={({ target }) => setSearchTerm(target.value)}\n          onEnter={handleSearch}\n        />\n        <GButton classes=\"search-section__button\" onClick={handleSearch}>\n          Search\n        </GButton>\n      </div>\n    </section>\n  );\n}\n\nexport default SearchSection;\n","import SearchSection from './SearchSection';\n\nexport default SearchSection;\n","export default __webpack_public_path__ + \"static/media/loading.1a60ec50.png\";","import React from 'react';\n\nimport { GModal, GText } from '@ui';\n\nimport loading from '@assets/imgs/loading.png';\n\nimport './TheLoading.scss';\n\nfunction TheLoading() {\n  return (\n    <GModal>\n      <img\n        src={loading}\n        alt=\"Rick and Morty visiting an alien planet\"\n        className=\"the-loading__img\"\n      />\n      <GText classes=\"the-loading__text\">Loading</GText>\n    </GModal>\n  );\n}\n\nexport default TheLoading;\n","import TheLoading from './TheLoading';\n\nexport default TheLoading;\n","import React, { useContext } from 'react';\nimport classNames from 'classnames/bind';\nimport PropTypes from 'prop-types';\n\nimport { GCard, GText, GTitle } from '@ui';\nimport { GlobalContext } from '@contexts/GlobalContext';\n\nimport './CharacterCard.scss';\n\nfunction CharacterCard({ classes, character }) {\n  const className = classNames(\n    'character-card__img',\n    character.status === 'Dead' && 'character-card__img--dead'\n  );\n  const { setModalCharacter } = useContext(GlobalContext);\n\n  function handleClick() {\n    setModalCharacter(character);\n  }\n\n  return (\n    <GCard classes={`character-card${' ' + classes}`} onClick={handleClick}>\n      <img src={character.image} alt={character.name} className={className} />\n      <div className=\"character-card__text-container\">\n        <GTitle family=\"seravek\" weight=\"bold\" classes=\"character-card__title\">\n          {character.name}\n        </GTitle>\n        <GText family=\"seravek\" classes=\"character-card__subtitle\">\n          {character.species}\n        </GText>\n      </div>\n    </GCard>\n  );\n}\n\nCharacterCard.propTypes = {\n  classes: PropTypes.string,\n  character: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    image: PropTypes.string.isRequired,\n    species: PropTypes.string.isRequired,\n    status: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default CharacterCard;\n","import CharacterCard from './CharacterCard';\n\nexport default CharacterCard;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUserFriends } from '@fortawesome/free-solid-svg-icons';\n\nimport { GText, GTitle } from '@ui';\n\nimport './CharacterLocation.scss';\n\nfunction CharacterLocation({ location }) {\n  const [residentsNumber, setResidentsNumber] = useState(\n    location.residents && location.residents.length\n  );\n\n  useEffect(() => {\n    if (!residentsNumber && residentsNumber !== 0) {\n      setResidentsNumber('unknown quantify of');\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <>\n      <GTitle\n        tag=\"h2\"\n        color=\"darkest-grey\"\n        classes=\"character-location__title-planet\"\n      >\n        {location.type || 'unknown type'}\n      </GTitle>\n      <GTitle tag=\"h3\" classes=\"character-location__title-planet-name\">\n        {location.name || 'unknown location'}\n      </GTitle>\n      <GTitle\n        tag=\"h4\"\n        color=\"light-grey\"\n        classes=\"character-location__title-planet-dimension\"\n      >\n        {location.dimension || 'unknown dimension'}\n      </GTitle>\n      <div className=\"character-location__residents\">\n        <FontAwesomeIcon icon={faUserFriends} />\n        <GText\n          color=\"darkest-grey\"\n          classes=\"character-location__residents-text\"\n        >\n          {residentsNumber} residents\n        </GText>\n      </div>\n    </>\n  );\n}\n\nCharacterLocation.propTypes = {\n  location: PropTypes.shape({\n    type: PropTypes.string,\n    name: PropTypes.string,\n    dimension: PropTypes.string,\n    residents: PropTypes.array,\n  }).isRequired,\n};\n\nexport default CharacterLocation;\n","import CharacterLocation from './CharacterLocation';\n\nexport default CharacterLocation;\n","import React, { useContext, useEffect, useState } from 'react';\n\nimport { GlobalContext } from '@contexts/GlobalContext';\nimport { GText, GTitle } from '@ui';\nimport CharacterLocation from '@components/CharacterLocation';\n\nimport './CharacterInfo.scss';\n\nfunction CharacterInfo() {\n  const { modalCharacter } = useContext(GlobalContext);\n  const gender = modalCharacter.gender.toLowerCase();\n  const species = modalCharacter.species.toLowerCase();\n  const status = `${modalCharacter.status.toLowerCase()}${\n    modalCharacter.status === 'Alive' && ' and well'\n  }`;\n  const lastSeen =\n    modalCharacter.episode[modalCharacter.episode.length - 1].air_date;\n  const [aboutText, setAboutText] = useState('');\n\n  function returnPersonalPronoun() {\n    switch (gender) {\n      case 'male':\n        return 'He';\n      case 'female':\n        return 'She';\n      default:\n        return 'It';\n    }\n  }\n\n  useEffect(() => {\n    const { name } = modalCharacter;\n\n    setAboutText(\n      `${name} is a ${gender} ${species}. ${returnPersonalPronoun()} is ${status}. \\\n      Last seen in ${lastSeen}.`\n    );\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <>\n      <GTitle\n        color=\"lime-green\"\n        spacing=\"large\"\n        classes=\"character-info__title\"\n      >\n        About\n      </GTitle>\n      <GText classes=\"character-info__about-text\">{aboutText}</GText>\n      <GTitle\n        color=\"lime-green\"\n        spacing=\"large\"\n        classes=\"character-info__title character-info__title--origin\"\n      >\n        Origin\n      </GTitle>\n      <CharacterLocation location={modalCharacter.origin} />\n      <GTitle\n        color=\"lime-green\"\n        spacing=\"large\"\n        classes=\"character-info__title character-info__title--location\"\n      >\n        Location\n      </GTitle>\n      <CharacterLocation location={modalCharacter.location} />\n    </>\n  );\n}\n\nexport default CharacterInfo;\n","import CharacterInfo from './CharacterInfo';\n\nexport default CharacterInfo;\n","import React, { useContext } from 'react';\n\nimport { GButton, GCard, GModal, GText, GTitle } from '@ui';\nimport CharacterInfo from '@components/CharacterInfo';\nimport { GlobalContext } from '@contexts/GlobalContext';\n\nimport './CharacterSheet.scss';\n\nfunction CharacterSheet() {\n  const { modalCharacter, setModalCharacter } = useContext(GlobalContext);\n\n  return (\n    <GModal>\n      <GCard variant=\"sheet\" classes=\"character-sheet__card\">\n        <div className=\"character-sheet__image-blurred-container\">\n          {/* eslint-disable-next-line jsx-a11y/img-redundant-alt */}\n          <img\n            src={modalCharacter.image}\n            alt=\"image blurred\"\n            className=\"character-sheet__image-blurred\"\n          />\n        </div>\n        <GButton\n          classes=\"character-sheet__close\"\n          onClick={() => setModalCharacter(null)}\n        >\n          Close\n        </GButton>\n        <GCard\n          variant=\"img-sheet\"\n          classes=\"character-sheet__sheet-img-container\"\n        >\n          <img\n            src={modalCharacter.image}\n            alt={modalCharacter.name}\n            className=\"character-sheet__sheet-img\"\n          />\n          <div className=\"character-sheet__text-container\">\n            <GTitle\n              family=\"seravek\"\n              weight=\"bold\"\n              classes=\"character-sheet__text-container-title\"\n            >\n              {modalCharacter.name}\n            </GTitle>\n            <GText\n              family=\"seravek\"\n              classes=\"character-sheet__text-container-subtitle\"\n            >\n              {modalCharacter.species}\n            </GText>\n          </div>\n        </GCard>\n        <div className=\"character-sheet__info-content\">\n          <CharacterInfo />\n        </div>\n      </GCard>\n    </GModal>\n  );\n}\n\nexport default CharacterSheet;\n","import CharacterSheet from './CharacterSheet';\n\nexport default CharacterSheet;\n","import React, { useContext } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimes, faUserFriends } from '@fortawesome/free-solid-svg-icons';\n\nimport { GCard, GModal, GText, GTitle } from '@ui';\nimport CharacterCard from '@components/CharacterCard';\nimport { GlobalContext } from '@contexts/GlobalContext';\n\nimport './CharacterSheetMobile.scss';\n\nfunction CharacterSheetMobile() {\n  const { modalCharacter, setModalCharacter } = useContext(GlobalContext);\n\n  return (\n    <GModal>\n      <GCard variant=\"sheet\" classes=\"character-sheet-mobile__card\">\n        <div className=\"character-sheet-mobile__gray-box\"></div>\n        <FontAwesomeIcon\n          icon={faTimes}\n          className=\"character-sheet-mobile__times\"\n          onClick={() => setModalCharacter(null)}\n        />\n        <CharacterCard\n          character={modalCharacter}\n          classes=\"character-sheet-mobile__card-img\"\n        />\n        <div className=\"character-sheet-mobile__info-content\">\n          <GTitle\n            color=\"lime-green\"\n            spacing=\"large\"\n            classes=\"info-content-mobile__title\"\n          >\n            About\n          </GTitle>\n          <GText classes=\"info-content-mobile__about-text\">{`${\n            modalCharacter.name\n          } is a ${modalCharacter.gender.toLowerCase()} ${modalCharacter.species.toLowerCase()}. ${\n            modalCharacter.gender.toLowerCase() === 'male'\n              ? 'He'\n              : modalCharacter.gender.toLowerCase() === 'female'\n              ? 'She'\n              : 'It'\n          } is ${\n            modalCharacter.status === 'Alive'\n              ? `${modalCharacter.status.toLowerCase()} and well`\n              : modalCharacter.status.toLowerCase()\n          }. Last seen in ${\n            modalCharacter.episode[modalCharacter.episode.length - 1].air_date\n          }.`}</GText>\n          <GTitle\n            color=\"lime-green\"\n            spacing=\"large\"\n            classes=\"info-content-mobile__title info-content-mobile__title--origin\"\n          >\n            Origin\n          </GTitle>\n          <GTitle\n            tag=\"h2\"\n            color=\"darkest-grey\"\n            classes=\"info-content-mobile__title-planet\"\n          >\n            {modalCharacter.origin.type}\n          </GTitle>\n          <GTitle tag=\"h3\" classes=\"info-content-mobile__title-planet-name\">\n            {modalCharacter.origin.name}\n          </GTitle>\n          <GTitle\n            tag=\"h4\"\n            color=\"light-grey\"\n            classes=\"info-content-mobile__title-planet-dimension\"\n          >\n            {modalCharacter.origin.dimension}\n          </GTitle>\n          <div className=\"info-content-mobile__residents\">\n            <FontAwesomeIcon icon={faUserFriends} />\n            <GText\n              color=\"darkest-grey\"\n              classes=\"info-content-mobile__residents-text\"\n            >\n              {(modalCharacter.origin.residents &&\n                modalCharacter.origin.residents.length) ||\n                'unknow'}{' '}\n              residents\n            </GText>\n          </div>\n          <GTitle\n            color=\"lime-green\"\n            spacing=\"large\"\n            classes=\"info-content-mobile__title info-content-mobile__title--location\"\n          >\n            Location\n          </GTitle>\n          <GTitle\n            tag=\"h2\"\n            color=\"darkest-grey\"\n            classes=\"info-content-mobile__title-planet\"\n          >\n            {modalCharacter.location.type}\n          </GTitle>\n          <GTitle tag=\"h3\" classes=\"info-content-mobile__title-planet-name\">\n            {modalCharacter.location.name}\n          </GTitle>\n          <GTitle\n            tag=\"h4\"\n            color=\"light-grey\"\n            classes=\"info-content-mobile__title-planet-dimension\"\n          >\n            {modalCharacter.location.dimension}\n          </GTitle>\n          <div className=\"info-content-mobile__residents\">\n            <FontAwesomeIcon icon={faUserFriends} />\n            <GText\n              color=\"darkest-grey\"\n              classes=\"info-content-mobile__residents-text\"\n            >\n              {(modalCharacter.location.residents &&\n                modalCharacter.location.residents.length) ||\n                'unknow'}{' '}\n              residents\n            </GText>\n          </div>\n        </div>\n      </GCard>\n    </GModal>\n  );\n}\n\nexport default CharacterSheetMobile;\n","import CharacterSheetMobile from './CharacterSheetMobile';\n\nexport default CharacterSheetMobile;\n","import React, { useContext } from 'react';\nimport classNames from 'classnames/bind';\n\nimport SearchSection from '@components/SearchSection';\nimport TheLoading from '@components/TheLoading';\nimport CharacterCard from '@components/CharacterCard';\nimport CharacterSheet from '@components/CharacterSheet';\nimport CharacterSheetMobile from '@components/CharacterSheetMobile';\nimport { GPagination } from '@ui';\nimport { GlobalContext } from '@contexts/GlobalContext';\n\nimport './TheHome.scss';\n\nfunction TheHome() {\n  const { characters, isLoading, modalCharacter } = useContext(GlobalContext);\n  const className = classNames('the-home', isLoading && ' the-home--blur');\n\n  return (\n    <>\n      {isLoading && <TheLoading />}\n      {modalCharacter &&\n        (window.innerWidth < 1440 ? (\n          <CharacterSheetMobile />\n        ) : (\n          <CharacterSheet />\n        ))}\n      <div className={className}>\n        <div className=\"the-home__img-background\">\n          <SearchSection />\n          <section className=\"the-home__cards\">\n            {characters.map((character) => (\n              <CharacterCard key={character.id} character={character} />\n            ))}\n          </section>\n          {characters.length && (\n            <section className=\"the-home__pagination-section\">\n              <GPagination />\n            </section>\n          )}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default TheHome;\n","import TheHome from './TheHome';\n\nexport default TheHome;\n","import React from 'react';\nimport {\n  Redirect,\n  Route,\n  BrowserRouter as Router,\n  Switch,\n} from 'react-router-dom';\n\nimport TheHome from '@pages/TheHome';\n\nconst Routes = () => (\n  <Router>\n    <Switch>\n      <Route exact path=\"/rick-morty-front-end-test\" component={TheHome} />\n      <Redirect from=\"*\" to=\"/rick-morty-front-end-test\" />\n    </Switch>\n  </Router>\n);\n\nexport default Routes;\n","import Routes from '@/routes';\n\nimport { GlobalStorage } from '@contexts/GlobalContext';\n\nimport '@/App.scss';\n\nfunction App() {\n  return (\n    <GlobalStorage>\n      <Routes />\n    </GlobalStorage>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from '@/App';\nimport reportWebVitals from '@/reportWebVitals';\n\nimport '@/index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}