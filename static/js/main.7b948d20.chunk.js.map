{"version":3,"sources":["components/ui/atoms/GButton/GButton.js","components/ui/atoms/GButton/index.js","components/ui/atoms/GCard/GCard.js","components/ui/atoms/GInput/GInput.js","components/ui/atoms/GInput/index.js","components/ui/atoms/GText/GText.js","components/ui/atoms/GText/index.js","components/ui/atoms/GTitle/GTitle.js","contexts/GlobalContext.js","assets/imgs/logo.png","components/SearchSection/index.js","components/SearchSection/SearchSection.js","assets/imgs/loading.png","components/TheLoading/index.js","components/TheLoading/TheLoading.js","pages/TheHome/TheHome.js","pages/TheHome/index.js","routes/index.js","App.js","reportWebVitals.js","index.js"],"names":["GButton","children","classes","rest","className","classNames","GCard","variant","defaultProps","GInput","change","onChange","GText","color","family","GTitle","spacing","tag","weight","HtmlTag","GlobalContext","createContext","GlobalStorage","useState","searchTerm","setSearchTerm","characters","setCharacters","isLoading","Provider","value","handleSearch","SearchSection","useContext","src","logo","alt","type","placeholder","target","onClick","TheLoading","loading","TheHome","Routes","exact","path","component","from","to","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7b948d20.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames/bind';\nimport PropTypes from 'prop-types';\n\nimport './GButton.scss';\n\nfunction GButton({ children, classes, ...rest }) {\n  const className = classNames('g-button', classes);\n\n  return (\n    <button className={className} {...rest}>\n      {children}\n    </button>\n  );\n}\n\nGButton.propTypes = {\n  children: PropTypes.node,\n  classes: PropTypes.string,\n};\n\nexport default GButton;\n","import GButton from './GButton';\n\nexport default GButton;\n","import React from 'react';\nimport classNames from 'classnames/bind';\nimport PropTypes from 'prop-types';\n\nimport './GCard.scss';\n\nfunction GCard({ children, classes, variant, ...rest }) {\n  const className = classNames('g-card', `g-card--${variant}`, classes);\n\n  return (\n    <div className={className} {...rest}>\n      {children}\n    </div>\n  );\n}\n\nGCard.defaultProps = {\n  variant: 'normal',\n};\n\nGCard.propTypes = {\n  children: PropTypes.node,\n  classes: PropTypes.string,\n  variant: PropTypes.oneOf(['normal', 'loading', 'sheet', 'img-sheet']),\n};\n\nexport default GCard;\n","import React from 'react';\nimport classNames from 'classnames/bind';\nimport PropTypes from 'prop-types';\n\nimport './GInput.scss';\n\nfunction GInput({ change, classes, ...rest }) {\n  const className = classNames('g-input', classes);\n\n  return <input className={className} onChange={change} {...rest} />;\n}\n\nGInput.defaultProps = {\n  change: () => {},\n};\n\nGInput.propTypes = {\n  change: PropTypes.func,\n  classes: PropTypes.string,\n};\n\nexport default GInput;\n","import GInput from './GInput';\n\nexport default GInput;\n","import React from 'react';\nimport classNames from 'classnames/bind';\nimport PropTypes from 'prop-types';\n\nimport './GText.scss';\n\nfunction GText({ color, children, classes, family, ...rest }) {\n  const className = classNames(\n    'g-text',\n    `g-text--${color}`,\n    `g-text--${family}`,\n    classes\n  );\n\n  return (\n    <p className={className} {...rest}>\n      {children}\n    </p>\n  );\n}\n\nGText.defaultProps = {\n  color: 'white',\n  family: 'nunito',\n};\n\nGText.propTypes = {\n  children: PropTypes.node,\n  classes: PropTypes.string,\n  color: PropTypes.oneOf(['darkest-grey', 'light-grey', 'white']),\n  family: PropTypes.oneOf(['nunito', 'seravek']),\n};\n\nexport default GText;\n","import GText from './GText';\n\nexport default GText;\n","import React from 'react';\nimport classNames from 'classnames/bind';\nimport PropTypes from 'prop-types';\n\nimport './GTitle.scss';\n\nfunction GTitle({\n  color,\n  children,\n  classes,\n  family,\n  spacing,\n  tag,\n  weight,\n  ...rest\n}) {\n  const HtmlTag = tag;\n  const className = classNames(\n    'g-title',\n    `g-title--${color}`,\n    `g-title--${family}`,\n    `g-title--space-${spacing}`,\n    `g-title--${weight}`,\n    classes\n  );\n\n  return (\n    <HtmlTag className={className} {...rest}>\n      {children}\n    </HtmlTag>\n  );\n}\n\nGTitle.defaultProps = {\n  color: 'white',\n  family: 'nunito',\n  spacing: 'normal',\n  tag: 'h1',\n  weight: 'normal',\n};\n\nGTitle.propTypes = {\n  children: PropTypes.node,\n  classes: PropTypes.string,\n  color: PropTypes.oneOf(['darkest-grey', 'light-grey', 'lime-green', 'white']),\n  family: PropTypes.oneOf(['nunito', 'seravek']),\n  spacing: PropTypes.oneOf(['normal', 'large']),\n  tag: PropTypes.oneOf(['h1', 'h2', 'h3', 'h4', 'h5', 'h6']),\n  weight: PropTypes.oneOf(['normal', 'bold']),\n};\n\nexport default GTitle;\n","import React, { createContext, useState } from 'react';\n\nexport const GlobalContext = createContext();\n\nexport const GlobalStorage = ({ children }) => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [characters, setCharacters] = useState([]);\n  const [isLoading /*, setIsLoading*/] = useState(false);\n\n  function handleSearch() {\n    // Do search\n    setCharacters([\n      /* result */\n    ]);\n  }\n\n  return (\n    <GlobalContext.Provider\n      value={{ searchTerm, setSearchTerm, characters, handleSearch, isLoading }}\n    >\n      {children}\n    </GlobalContext.Provider>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/logo.66cb6353.png\";","import SearchSection from './SearchSection';\n\nexport default SearchSection;\n","import React, { useContext } from 'react';\n\nimport { GButton, GInput } from '@ui';\nimport { GlobalContext } from '@contexts/GlobalContext';\n\nimport logo from '@assets/imgs/logo.png';\n\nimport './SearchSection.scss';\n\nconst SearchSection = () => {\n  const { searchTerm, setSearchTerm, handleSearch } = useContext(GlobalContext);\n\n  return (\n    <section className=\"search-section\">\n      <img\n        src={logo}\n        alt=\"Rick and Morty logo\"\n        className=\"search-section__logo\"\n      />\n      <div className=\"search-section__input-container\">\n        <GInput\n          type=\"text\"\n          placeholder=\"Search characters\"\n          value={searchTerm}\n          change={({ target }) => setSearchTerm(target.value)}\n        />\n        <GButton classes=\"search-section__button\" onClick={handleSearch}>\n          Search\n        </GButton>\n      </div>\n    </section>\n  );\n};\n\nexport default SearchSection;\n","export default __webpack_public_path__ + \"static/media/loading.1a60ec50.png\";","import TheLoading from './TheLoading';\n\nexport default TheLoading;\n","import React from 'react';\n\nimport { GText } from '@ui';\n\nimport loading from '@assets/imgs/loading.png';\n\nimport './TheLoading.scss';\n\nconst TheLoading = () => {\n  return (\n    <div className=\"the-loading\">\n      <img\n        src={loading}\n        alt=\"Rick and Morty visiting an alien planet\"\n        className=\"the-loading__img\"\n      />\n      <GText classes=\"the-loading__text\">Loading</GText>\n    </div>\n  );\n};\n\nexport default TheLoading;\n","import React, { useContext } from 'react';\nimport classNames from 'classnames/bind';\n\nimport SearchSection from '@components/SearchSection';\nimport TheLoading from '@components/TheLoading';\nimport { GlobalContext } from '@contexts/GlobalContext';\n\nimport './TheHome.scss';\n\nfunction TheHome() {\n  const { isLoading } = useContext(GlobalContext);\n  const className = classNames('the-home', isLoading && ' the-home--blur');\n\n  return (\n    <>\n      {isLoading && <TheLoading />}\n      <div className={className}>\n        <div className=\"the-home__img-background\">\n          <SearchSection />\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default TheHome;\n","import TheHome from './TheHome';\n\nexport default TheHome;\n","import React from 'react';\nimport {\n  Redirect,\n  Route,\n  BrowserRouter as Router,\n  Switch,\n} from 'react-router-dom';\n\nimport TheHome from '@pages/TheHome';\n\nconst Routes = () => (\n  <Router>\n    <Switch>\n      <Route exact path=\"/rick-morty-front-end-test\" component={TheHome} />\n      <Redirect from=\"*\" to=\"/rick-morty-front-end-test\" />\n    </Switch>\n  </Router>\n);\n\nexport default Routes;\n","import Routes from '@/routes';\n\nimport { GlobalStorage } from '@contexts/GlobalContext';\n\nimport '@/App.scss';\n\nfunction App() {\n  return (\n    <GlobalStorage>\n      <Routes />\n    </GlobalStorage>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from '@/App';\nimport reportWebVitals from '@/reportWebVitals';\n\nimport '@/index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}